import os
import time
from flask import Flask, jsonify
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request
from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload
import pickle
import mimetypes
import re
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
from threading import Thread

app = Flask(__name__)

# Configuration
SCOPES = ['https://www.googleapis.com/auth/drive.file']
WHATSAPP_DIR = os.path.expanduser('~/Library/Group Containers/group.net.whatsapp.WhatsApp.shared/Message/Media')

class WhatsAppDriveSync:
    def __init__(self):
        self.drive_service = None
        self.sync_status = {
            'is_running': False,
            'last_synced': None,
            'total_files_synced': 0,
            'last_error': None
        }
        
    def authenticate(self):
        """Handles Google Drive authentication."""
        creds = None
        if os.path.exists('token.pickle'):
            with open('token.pickle', 'rb') as token:
                creds = pickle.load(token)
                
        if not creds or not creds.valid:
            if creds and creds.expired and creds.refresh_token:
                creds.refresh(Request())
            else:
                flow = InstalledAppFlow.from_client_secrets_file(
                    'credentials.json', SCOPES)
                creds = flow.run_local_server(port=0)
                
            with open('token.pickle', 'wb') as token:
                pickle.dump(creds, token)

        self.drive_service = build('drive', 'v3', credentials=creds)
        
    def extract_contact_info(self, file_path):
        """Extract contact info from WhatsApp media path."""
        path_parts = file_path.split(os.path.sep)
        for part in path_parts:
            if '@' in part:
                is_group = '@g.us' in part
                contact_id = part.split('@')[0]
                if not is_group:
                    contact_id = re.sub(r'^(\d{1,3})(\d+)$', r'\1-\2', contact_id)
                else:
                    contact_id = f'group-{contact_id}'
                return contact_id, is_group
        return 'unknown', False

    def create_folder_if_not_exists(self, folder_name, parent_id=None):
        """Creates a folder in Google Drive if it doesn't exist."""
        query = f"name='{folder_name}' and mimeType='application/vnd.google-apps.folder'"
        if parent_id:
            query += f" and '{parent_id}' in parents"
            
        results = self.drive_service.files().list(
            q=query,
            spaces='drive',
            fields='files(id, name)').execute()
            
        if not results['files']:
            file_metadata = {
                'name': folder_name,
                'mimeType': 'application/vnd.google-apps.folder'
            }
            if parent_id:
                file_metadata['parents'] = [parent_id]
                
            folder = self.drive_service.files().create(
                body=file_metadata,
                fields='id').execute()
            return folder.get('id')
            
        return results['files'][0]['id']

    def get_media_type_folder(self, contact_id, is_group, media_type):
        """Creates or gets the folder structure for a specific media type."""
        whatsapp_folder_id = self.create_folder_if_not_exists('WhatsApp Sync')
        contact_type = 'Groups' if is_group else 'Contacts'
        type_folder_id = self.create_folder_if_not_exists(contact_type, whatsapp_folder_id)
        contact_folder_id = self.create_folder_if_not_exists(contact_id, type_folder_id)
        return self.create_folder_if_not_exists(media_type, contact_folder_id)

    def upload_file(self, file_path):
        """Uploads a file to the appropriate folder in Google Drive."""
        try:
            if not os.path.exists(file_path):
                return False
                
            contact_id, is_group = self.extract_contact_info(file_path)
            
            mime_type = mimetypes.guess_type(file_path)[0]
            if mime_type:
                if mime_type.startswith('image/'):
                    media_type = 'Images'
                elif mime_type.startswith('video/'):
                    media_type = 'Videos'
                elif mime_type.startswith('audio/'):
                    media_type = 'Audio'
                else:
                    media_type = 'Documents'
            else:
                media_type = 'Documents'

            folder_id = self.get_media_type_folder(contact_id, is_group, media_type)
            
            file_metadata = {
                'name': os.path.basename(file_path),
                'parents': [folder_id]
            }

            media = MediaFileUpload(
                file_path,
                mimetype=mime_type,
                resumable=True
            )
            
            self.drive_service.files().create(
                body=file_metadata,
                media_body=media,
                fields='id').execute()
                
            self.sync_status['total_files_synced'] += 1
            self.sync_status['last_synced'] = time.strftime('%Y-%m-%d %H:%M:%S')
            return True
            
        except Exception as e:
            self.sync_status['last_error'] = str(e)
            print(f"Error uploading {file_path}: {str(e)}")
            return False

class WhatsAppHandler(FileSystemEventHandler):
    def __init__(self, sync_tool):
        self.sync_tool = sync_tool

    def on_created(self, event):
        if not event.is_directory:
            print(f"New file detected: {event.src_path}")
            self.sync_tool.upload_file(event.src_path)

# Initialize sync tool
sync_tool = WhatsAppDriveSync()
observer = None

def start_sync():
    """Start the file system observer."""
    global observer
    if observer is None:
        sync_tool.sync_status['is_running'] = True
        observer = Observer()
        event_handler = WhatsAppHandler(sync_tool)
        observer.schedule(event_handler, WHATSAPP_DIR, recursive=True)
        observer.start()
        print(f"Started watching WhatsApp Media directory: {WHATSAPP_DIR}")

def stop_sync():
    """Stop the file system observer."""
    global observer
    if observer:
        sync_tool.sync_status['is_running'] = False
        observer.stop()
        observer.join()
        observer = None
        print("Stopped watching WhatsApp Media directory")

@app.route('/start', methods=['POST'])
def start_service():
    """Start the sync service."""
    try:
        start_sync()
        return jsonify({'status': 'success', 'message': 'Sync service started'})
    except Exception as e:
        return jsonify({'status': 'error', 'message': str(e)}), 500

@app.route('/stop', methods=['POST'])
def stop_service():
    """Stop the sync service."""
    try:
        stop_sync()
        return jsonify({'status': 'success', 'message': 'Sync service stopped'})
    except Exception as e:
        return jsonify({'status': 'error', 'message': str(e)}), 500

@app.route('/status', methods=['GET'])
def get_status():
    """Get the current sync status."""
    return jsonify(sync_tool.sync_status)

@app.route('/health', methods=['GET'])
def health_check():
    """Health check endpoint."""
    return jsonify({'status': 'healthy'})

if __name__ == '__main__':
    # Initialize Google Drive authentication
    sync_tool.authenticate()
    
    # Start sync service automatically
    start_sync()
    
    # Run Flask app
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port)